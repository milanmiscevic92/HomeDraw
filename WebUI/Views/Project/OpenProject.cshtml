@model WebUI.Models.OpenProjectViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <script src="~/Scripts/jquery-3.0.0.js"></script>
    <script src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <script src="~/Scripts/two.js"></script>
    <script src="~/Scripts/TwoJsMain.js"></script>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/CustomStyle.css" rel="stylesheet" />
    <meta name="viewport" content="width=device-width" />
    <title>OpenProject</title>
</head>
<body style="height:100vh;">
    <div class="container-fluid" style="height:100%; padding-left:0px; padding-right:0px;">
        <div class="row" style="height:100%; margin-right: 0px; margin-left: 0px;">
            <!-- TOP HEADING COLUMN -->
            <div class="col-md-12 text-center mt-2" style="border-bottom:1px solid lightgray;">Drawing Surface</div>



            <!-- DRAWING AREA START -->
            <div id="drawingArea" class="col-md-12" style="height:80%; border-bottom:1px solid lightgray;">

            </div>
            <!-- DRAWING AREA ENDING -->
            <!-- BUTTONS COLUMN -->
            <div class="col-md-12" style="vertical-align:bottom;">
                <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                    <div class="btn-group mr-auto ml-auto" role="group" aria-label="First group">
                        <button id="CreateBathButton" type="button" class="btn btn-info">Bath</button>
                        <button id="CreateLavatoryButton" type="button" class="btn btn-info">Lavatory</button>
                        <button id="CreateShowerButton" type="button" class="btn btn-info">Shower</button>
                        <button id="CreateDoorButton" type="button" class="btn btn-info">Door</button>
                        <button id="CreateWallButton" type="button" class="btn btn-info">Wall</button>
                        <button id="CreateWindowButton" type="button" class="btn btn-info">Window</button>
                        <button id="CreateRefrigeratorButton" type="button" class="btn btn-info">Refrigerator</button>
                        <button id="CreateSinkButton" type="button" class="btn btn-info">Sink</button>
                        <button id="CreateStoveButton" type="button" class="btn btn-info">Stove</button>
                        <button id="CreateSofaButton" type="button" class="btn btn-info">Sofa</button>
                        <button id="CreateTableButton" type="button" class="btn btn-info">Table</button>
                        <button class="btn btn-success">Save Drawing</button>
                        @Html.ActionLink("Exit Room", "CreateOrJoinProject", "Project", null, new { @class = "btn btn-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
















    <!-- ==============================SCRIPTS ===================================-->
    <!-- DRAW BATH -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createBathCallback = function (bathSize, bathId) {

                var x = bathSize;
                var y = x / 2;

                // Create DIV that cotains bath element
                var bathDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: bathId + 'bath',
                });

                $('#drawingArea').append(bathDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        bath = $("#" + bathId + 'bath').offset();
                        $.connection.serverHub.server.updateBath(bath, bathId);
                    }
                }));


                var elem = document.getElementById(bathId + 'bath');
                var two = new Two({ height: y, width: x }).appendTo(elem);


                var bathOuterRectangle = two.makeRectangle(0, 0, x, y);
                var bathInnerRoundedRectangle = two.makeRoundedRectangle(0, 0, x / 1.05, y / 1.111, 14);

                bathOuterRectangle.linewidth = 3;
                bathInnerRoundedRectangle.linewidth = 2;

                var bathInnerOuter = two.makeGroup(bathOuterRectangle, bathInnerRoundedRectangle);

                bathInnerOuter.translation.set(two.width / 2, two.height / 2);

                var bathTapTop = two.makeCircle(0, -x / 20, x / 20);
                var bathTapBottom = two.makeCircle(0, x / 20, x / 20);
                var bathTapRectangle = two.makeRectangle(x / 16, 0, x / 4.4, y / 10);

                var bathTap = two.makeGroup(bathTapTop, bathTapBottom, bathTapRectangle);

                bathTap.translation.set(two.width / 2 - bathOuterRectangle.height, two.height / 2);

                two.update();


            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateBathButton').click(function () {
                    // Call the CreateProject method on the hub
                    $.connection.serverHub.server.createBath(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update bath -->
    <script>
        $(function () {
            var moveBathHub = $.connection.serverHub;
            moveBathHub.client.updateBath = function (model, bathId) {
                // bath = model;
                $("#" + bathId + 'bath').css({ left: model.left, top: model.top });
            };
        });

    </script>


    <!-- ===== LAVATORY ===== -->
    <!-- draw lavatory -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createLavatoryCallback = function (lavatorySize, lavatoryId) {

                var x = lavatorySize;
                var y = x / 1.215;

                // Create DIV that cotains bath element
                var lavatoryDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: lavatoryId + 'lavatory',
                });


                // Append to drawing area and send to serverHub -> updateBath
                $('#drawingArea').append(lavatoryDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        lavatory = $("#" + lavatoryId + 'lavatory').offset();
                        $.connection.serverHub.server.updateLavatory(lavatory, lavatoryId);
                    }
                }));

                // TWO.JS that actually draws a svg
                var elem = document.getElementById(lavatoryId + 'lavatory');
                var two = new Two({ height: y, width: x }).appendTo(elem);

                var lavatoryOuterPath = two.makePath(-x / 2.025, 0, -x / 2.025, y / 2.5, x / 2.025, y / 2.5, x / 2.025, 0, x / 2.025, -y / 3.333, x / 4.05, -y / 2, -x / 4.05, -y / 2, -x / 2.025, -y / 3.333);
                var lavatoryInnerEllipse = two.makeEllipse(0, 0, x / 2.43, y / 2.85714285714);
                var lavatoryInnerOuter = two.makeGroup(lavatoryOuterPath, lavatoryInnerEllipse);

                lavatoryInnerOuter.translation.set(two.width / 2, two.height / 2);

                lavatoryOuterPath.linewidth = 3;
                lavatoryOuterPath.linewidth = 3;
                lavatoryInnerEllipse = 2;

                var lavatoryTapTop = two.makeCircle(-x / 8.86, -x / 16, x / 24.3, 12);
                var lavatoryTapBottom = two.makeCircle(-x / 8.86, x / 16, x / 24.3, 12);
                var lavatoryTapRectangle = two.makeRectangle(-x / 13.84375, 0, x / 5.4, y / 20);


                var lavatoryTap = two.makeGroup(lavatoryTapTop, lavatoryTapBottom, lavatoryTapRectangle);

                lavatoryTap.fill = 'grey';
                lavatoryTap.translation.set(two.width / 2, two.height / 2 + y / 4);
                lavatoryTap.rotation = -Math.PI / 2;



                two.update();

            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateLavatoryButton').click(function () {
                    // Call the CreateBath method on the hub
                    $.connection.serverHub.server.createLavatory(@Model.Project.ProjectID);
            });
        });

            });
    </script>
    <!-- update lavatory -->
    <script>
        $(function () {
            var moveLavatoryHub = $.connection.serverHub;

            moveLavatoryHub.client.updateLavatory = function (model, lavatoryId) {
                // lavatory = model;
                $("#" + lavatoryId + 'lavatory').css({ left: model.left, top: model.top });
            };
        });

    </script>


    <!--=========SHOWER==============-->
    <!-- draw shower -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createShowerCallback = function (showerSize, showerId) {

                var x = showerSize;
                var y = x;

                // Create DIV that cotains hower element
                var showerDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: showerId + 'shower',
                });


                // Append to drawing area and send to serverHub -> updateShower
                $('#drawingArea').append(showerDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        shower = $("#" + showerId + 'shower').offset();
                        $.connection.serverHub.server.updateShower(shower, showerId);
                    }
                }));

                // TWO.JS that actually draws a svg
                var elem = document.getElementById(showerId + 'shower');
                var two = new Two({ height: y, width: x }).appendTo(elem);

                var showerOuterRectangle = two.makeRectangle(0, 0, x, y);
                var showerInnerRectangle = two.makeRectangle(0, 0, x / 1.07, y / 1.07);
                var showerBottomToUpLineLeft = two.makeLine(-x / 2, y / 2, x / 2, -y / 2);
                var showerBottomToUpLineRight = two.makeLine(x / 2, y / 2, -x / 2, -y / 2);

                showerOuterRectangle.linewidth = 3;
                showerOuterRectangle.linewidth = 2;

                var showerInnerOuter = two.makeGroup(showerOuterRectangle, showerInnerRectangle, showerBottomToUpLineLeft, showerBottomToUpLineRight);

                showerInnerOuter.translation.set(two.width / 2, two.height / 2);

                two.update();

            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateShowerButton').click(function () {
                    // Call the CreateBath method on the hub
                    $.connection.serverHub.server.createShower(@Model.Project.ProjectID);
            });
        });

            });
    </script>
    <!-- update shower -->
    <script>
        $(function () {
            var moveShowerHub = $.connection.serverHub;

            moveShowerHub.client.updateShower = function (model, showerId) {
                // shower = model;
                $("#" + showerId + 'shower').css({ left: model.left, top: model.top });
            };
        });

    </script>

    <!--=========DOOR=================-->
    <!-- draw door -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createDoorCallback = function (doorSize, doorId) {

                var x = doorSize;
                var y = x;

                // Create DIV that cotains door element
                var doorDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: doorId + 'door',
                });

                $('#drawingArea').append(doorDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        door = $("#" + doorId + 'door').offset();
                        $.connection.serverHub.server.updateDoor(door, doorId);
                    }
                }));


                var elem = document.getElementById(doorId + 'door');
                var two = new Two({ height: y, width: x }).appendTo(elem);


                var doorLeftRectangle = two.makeRectangle(-x / 2, 0, x / 1.8, x / 18);
                var doorRightRectangle = two.makeRectangle(x / 2, 0, x / 1.8, x / 18);
                var doorLine = two.makeLine(-x / 4.5, 0, -x / 4.5, -x / 1.8);
                var doorCurve = two.makeCurve(-x / 4.5, -x / 1.8, -x / 5.14, -x / 1.8, -x / 6, -x / 1.8, x / 4.5, 0, true);


                doorLeftRectangle.linewidth = 3;
                doorRightRectangle.linewidth = 3;
                doorLine.linewidth = 3;

                var door = two.makeGroup(doorLeftRectangle, doorRightRectangle, doorLine, doorCurve);

                door.translation.set(two.width / 2, two.height / 2);

                two.update();
            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateDoorButton').click(function () {
                    // Call the CreateDoor method on the hub
                    $.connection.serverHub.server.createDoor(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update door -->
    <script>
        $(function () {
            var moveDoorHub = $.connection.serverHub;
            moveDoorHub.client.updateDoor = function (model, doorId) {
                // door = model;
                $("#" + doorId + 'door').css({ left: model.left, top: model.top });
            };
        });

    </script>


    <!-- ========WINDOW===============-->
    <!-- draw window -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createWindowCallback = function (windowSize, windowId) {

                var x = windowSize;
                var y = x / 8.5714

                // Create DIV that cotains window element
                var windowDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: windowId + 'window',
                });

                $('#drawingArea').append(windowDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        window = $("#" + windowId + 'window').offset();
                        $.connection.serverHub.server.updateWindow(window, windowId);
                    }
                }));


                var elem = document.getElementById(windowId + 'window');
                var two = new Two({ height: y, width: x }).appendTo(elem);


                var windowMainRectangle = two.makeRectangle(0, 0, x, y);
                var windowRectangleCenter1 = two.makeRectangle(0, -y / 4.375, x / 2.14, y / 2);
                var windowRectangleCenter2 = two.makeRectangle(0, y / 4.375, x / 2.14, y / 2);
                var windowRectangleCenter3 = two.makeRectangle(0, y / 1.66, x / 1.2, y / 3.5);

                windowMainRectangle.linewidth = 3;
                windowRectangleCenter1.linewidth = 1;

                var windowGroup = two.makeGroup(windowMainRectangle, windowRectangleCenter1, windowRectangleCenter2, windowRectangleCenter3);

                windowGroup.translation.set(two.width / 2, two.height / 2);

                two.update();
            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateWindowButton').click(function () {
                    // Call the CreateWidnow method on the hub
                    $.connection.serverHub.server.createWindow(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update window -->
    <script>
        $(function () {
            var moveWindowHub = $.connection.serverHub;
            moveWindowHub.client.updateWindow = function (model, windowId) {
                // window = model;
                $("#" + windowId + 'window').css({ left: model.left, top: model.top });
            };
        });

    </script>

    <!-- ========REFRIGERATOR===============-->
    <!-- draw refrigerator -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createFridgeCallback = function (fridgeSize, fridgeId) {

                var x = fridgeSize;
                var y = x * 1.5;

                // Create DIV that cotains bath element
                var fridgeDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: fridgeId + 'fridge',
                });

                $('#drawingArea').append(fridgeDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        fridge = $("#" + fridgeId + 'fridge').offset();
                        $.connection.serverHub.server.updateFridge(fridge, fridgeId);
                    }
                }));


                var elem = document.getElementById(fridgeId + 'fridge');
                var two = new Two({ height: y, width: x }).appendTo(elem);

                var mainFridgeRectangle = two.makeRectangle(0, 0, x, y);
                var rightFridgeBlackRectangle = two.makeRectangle(x / 2, 0, x / 4, y);


                var fridgeHandle1 = two.makeCircle(x / 1.61, -y / 3, x / 20);
                var fridgeHandle2 = two.makeCircle(x / 1.61, -y / 3.75, x / 20);

                fridgeHandle1.fill = 'grey';
                fridgeHandle2.fill = 'grey';

                rightFridgeBlackRectangle.fill = 'black';

                var fridgeGroup = two.makeGroup(mainFridgeRectangle, rightFridgeBlackRectangle, fridgeHandle1, fridgeHandle2);

                fridgeGroup.translation.set(two.width / 2, two.height / 2);

                two.update();


            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateRefrigeratorButton').click(function () {
                    // Call the CreateProject method on the hub
                    $.connection.serverHub.server.createFridge(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update fridge -->
    <script>
        $(function () {
            var moveFridgeHub = $.connection.serverHub;
            moveFridgeHub.client.updateFridge = function (model, fridgeId) {
                // fridge = model;
                $("#" + fridgeId + 'fridge').css({ left: model.left, top: model.top });
            };
        });

    </script>

    <!-- ========SINK===============-->
    <!-- draw sink -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createSinkCallback = function (sinkSize, sinkId) {

                var x = sinkSize;
                var y = x / 2.25;

                // Create DIV that cotains bath element
                var sinkDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: sinkId + 'sink',
                });

                $('#drawingArea').append(sinkDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        sink = $("#" + sinkId + 'sink').offset();
                        $.connection.serverHub.server.updateSink(sink, sinkId);
                    }
                }));


                var elem = document.getElementById(sinkId + 'sink');
                var two = new Two({ height: y, width: x }).appendTo(elem);

                var mainSinkRectangle = two.makeRectangle(0, 0, x - x / 2, y);
                var sinkRoundedRectangle = two.makeRoundedRectangle(0, 0, x / 2.7, x / 2.7, x / 18);

                mainSinkRectangle.linewidth = 3;
                sinkRoundedRectangle.linewidth = 2;

                var sinkGroup = two.makeGroup(mainSinkRectangle, sinkRoundedRectangle);

                sinkGroup.translation.set(two.width / 2, two.height / 2);


                var sinkTapTop = two.makeCircle(0, -y / 12, x / 27, 10);
                var sinkTapBottom = two.makeCircle(0, y / 12, x / 27, 12);
                var sinkTapRectangle = two.makeRectangle(x / 22.5, 0, x / 6, 10);
                var sinkTapGroup = two.makeGroup(sinkTapTop, sinkTapBottom, sinkTapRectangle);

                sinkTapGroup.fill = 'grey';
                sinkTapGroup.translation.set(two.width / 2, two.height / 2 + y / 2.18);
                sinkTapGroup.rotation = -Math.PI / 2;


                two.update();


            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateSinkButton').click(function () {
                    // Call the CreateProject method on the hub
                    $.connection.serverHub.server.createSink(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update sink -->
    <script>
        $(function () {
            var moveSinkHub = $.connection.serverHub;
            moveSinkHub.client.updateSink = function (model, sinkId) {
                // sink = model;
                $("#" + sinkId + 'sink').css({ left: model.left, top: model.top });
            };
        });

    </script>

    <!-- ========STOVE===============-->
    <!-- draw stove -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createStoveCallback = function (stoveSize, stoveId) {

                var x = stoveSize;
                var y = x;

                // Create DIV that cotains stove element
                var stoveDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: stoveId + 'stove',
                });

                $('#drawingArea').append(stoveDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        stove = $("#" + stoveId + 'stove').offset();
                        $.connection.serverHub.server.updateStove(stove, stoveId);
                    }
                }));


                var elem = document.getElementById(stoveId + 'stove');
                var two = new Two({ height: y, width: x }).appendTo(elem);

                var mainStoveRectangle = two.makeRectangle(0, 0, x, y);
                var leftStoveRectangle = two.makeRectangle(-x / 2, 0, x / 6.6, y);

                var topLeftCircle = two.makeCircle(-x / 5, -y / 4, x / 5);
                var bottomLeftCircle = two.makeCircle(-x / 5, y / 5, x / 5);

                var topRightCircle = two.makeCircle(x / 4, -y / 4, x / 5.714);
                var bottomRightCircle = two.makeCircle(x / 4, y / 4, x / 5.714);


                mainStoveRectangle.linewidth = 2;
                leftStoveRectangle.linewidth = 3;

                var sinkGroup = two.makeGroup(mainStoveRectangle, leftStoveRectangle, topLeftCircle, bottomLeftCircle, topRightCircle, bottomRightCircle);

                sinkGroup.translation.set(two.width / 2, two.height / 2);

                two.update();


            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateStoveButton').click(function () {
                    // Call the CreateProject method on the hub
                    $.connection.serverHub.server.createStove(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update stove -->
    <script>
        $(function () {
            var moveStoveHub = $.connection.serverHub;
            moveStoveHub.client.updateStove = function (model, stoveId) {
                // stove = model;
                $("#" + stoveId + 'stove').css({ left: model.left, top: model.top });
            };
        });

    </script>

    <!-- =========SOFA========= -->
    <!-- draw sofa -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createSofaCallback = function (sofaSize, sofaId) {

                var x = 150;
                var y = x / 3;

                // Create DIV that cotains sofa element
                var sofaDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: sofaId + 'sofa',
                });

                $('#drawingArea').append(sofaDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        sofa = $("#" + sofaId + 'sofa').offset();
                        $.connection.serverHub.server.updateSofa(sofa, sofaId);
                    }
                }));


                var elem = document.getElementById(sofaId + 'sofa');
                var two = new Two({ height: y, width: x }).appendTo(elem);

                var mainSofaRoundedRect = two.makeRoundedRectangle(0, 0, x, y, x / 30);
                var sofaTopRect = two.makeRectangle(0, -y / 2, x / 0.88, y / 5);
                var sofaLeftRect = two.makeRectangle(-x / 1.875, 0, x / 15, y * 1.2);
                var sofaRightRect = two.makeRectangle(x / 1.875, 0, x / 15, y * 1.2);


                mainSofaRoundedRect.linewidth = 3;
                sofaTopRect.linewidth = 3;
                sofaLeftRect.linewidth = 3;
                sofaRightRect.linewidth = 3;

                var sofaMiddle = two.makeLine(0, -y / 2, 0, y / 2);

                var sofaLeftPillow = two.makeRoundedRectangle(-x / 3.75, y / 20, x / 3.333, y / 1.25, x / 30);
                var sofaRightPillow = two.makeRoundedRectangle(x / 3.75, y / 20, x / 3.333, y / 1.25, x / 30)

                var sofaGroup = two.makeGroup(mainSofaRoundedRect, sofaMiddle, sofaLeftPillow, sofaRightPillow, sofaTopRect, sofaLeftRect, sofaRightRect);

                sofaGroup.translation.set(two.width / 2, two.height / 2);

                two.update();

            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateSofaButton').click(function () {
                    // Call the CreateProject method on the hub
                    $.connection.serverHub.server.createSofa(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update sofa -->
    <script>
        $(function () {
            var moveSofaHub = $.connection.serverHub;
            moveSofaHub.client.updateSofa = function (model, sofaId) {
                // sofa = model;
                $("#" + sofaId + 'sofa').css({ left: model.left, top: model.top });
            };
        });

    </script>

    <!-- =========TABLE========= -->
    <!-- draw table -->
    <script>
        $(function () {


            // Callback
            $.connection.serverHub.client.createTableCallback = function (tableSize, tableId) {

                var x = tableSize;
                var y = x / 2;

                // Create DIV that cotains table element
                var tableDiv = $('<div></div>', {
                    style: 'width: ' + x + 'px; height: ' + y + 'px;',
                    id: tableId + 'table',
                });

                $('#drawingArea').append(tableDiv.draggable({
                    containment: "parent",
                    drag: function () {
                        table = $("#" + tableId + 'bath').offset();
                        $.connection.serverHub.server.updateTable(table, tableId);
                    }
                }));


                var elem = document.getElementById(tableId + 'table');
                var two = new Two({ height: y, width: x }).appendTo(elem);


                var mainTableRect = two.makeRectangle(0, 0, x, y);

                var tableChairTopLeft = two.makeRoundedRectangle(-x / 3.33, -y / 1.25, x / 3.33, y / 2.5, x / 20);
                var tableChairTopRight = two.makeRoundedRectangle(x / 3.33, -y / 1.25, x / 3.33, y / 2.5, x / 20);

                var tableChairBottomLeft = two.makeRoundedRectangle(-x / 3.33, y / 1.25, x / 3.33, y / 2.5, x / 20);
                var tableChairBottomRight = two.makeRoundedRectangle(x / 3.33, y / 1.25, x / 3.33, y / 2.5, x / 20);

                mainTableRect.linewidth = 3;


                var tableGroup = two.makeGroup(mainTableRect, tableChairTopLeft, tableChairTopRight, tableChairBottomLeft, tableChairBottomRight);

                tableGroup.translation.set(two.width / 2, two.height / 2);

                two.update();


            };

            // Start the connection
            $.connection.hub.start().done(function () {
                $('#CreateTableButton').click(function () {
                    // Call the CreateProject method on the hub
                    $.connection.serverHub.server.createTable(@Model.Project.ProjectID);
            });
        });
            });
    </script>
    <!-- update table -->
    <script>
        $(function () {
            var moveTableHub = $.connection.serverHub;
            moveTableHub.client.updateTable = function (model, tableId) {
                // table = model;
                $("#" + tableId + 'table').css({ left: model.left, top: model.top });
            };
        });

    </script>



</body>
</html>
